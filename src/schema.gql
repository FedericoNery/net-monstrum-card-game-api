# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AvailableCardToPurchase {
  card: Card!
  quantity: Float!
}

type AvailableCardToPutInDeck {
  card: Card!
  quantity: Float!
}

interface Card {
  autoGeneratedId: Float!
  id: String!
  name: String!
  price: Float!
  type: String!
}

type CardDigimon implements Card {
  attackPoints: Float!
  autoGeneratedId: Float!
  color: String
  energyCount: Float
  evolution: CardDigimon
  healthPoints: Float!
  id: String!
  level: Float!
  name: String!
  price: Float!
  type: String!
}

type CardEnergy implements Card {
  autoGeneratedId: Float!
  color: String
  energyCount: Float
  id: String!
  name: String!
  price: Float!
  type: String!
}

type CardEquipment implements Card {
  attackPoints: Float
  autoGeneratedId: Float!
  healthPoints: Float
  id: String!
  name: String!
  price: Float!
  quantityOfTargets: Float
  targetScope: String
  type: String!
}

type CardSummonDigimon implements Card {
  autoGeneratedId: Float!
  digimonsCards: [CardDigimon!]!
  id: String!
  name: String!
  price: Float!
  type: String!
}

type Colors {
  black: Float!
  blue: Float!
  green: Float!
  red: Float!
  white: Float!
}

input CreateUserByEmailInput {
  avatarUrl: String!
  email: String!
  username: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

type CreatedUserByEmail {
  id: String!
  username: String!
}

type CreatedUserByEmailOutput {
  hasError: Boolean!
  result: CreatedUserByEmail
  successfull: Boolean!
  userAlreadyExist: Boolean!
}

type CreatedUserOutput {
  id: String!
  username: String!
}

type Folder {
  cards: [Card!]!
  colors: Colors!
  id: String!
  name: String!
}

input GetFolderByIdInput {
  folderId: String!
  userId: String!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): CreatedUserOutput!
  createUserByEmail(createUserInput: CreateUserByEmailInput!): CreatedUserByEmailOutput!
  purchaseCard(purchaseCardInput: PurchaseCardInput!): PurchaseCardOutput!
  signIn(signInInput: SignInInput!): SignInOutput!
  signInWithEmail(email: String!): SignInOutput!
  updateFolder(updateFolderInput: UpdateFolderInput!): UpdatedFolderOutput!
}

input PurchaseCardInput {
  cardIdToPurchase: String!
  userId: String!
}

type PurchaseCardOutput {
  cardNotFound: Boolean!
  insuficientCoins: Boolean!
  reachedMaxCopiesOfCard: Boolean!
  successful: Boolean!
}

type Query {
  cards: [Card!]!
  getAvailableCardsToPurchase(userId: String!): [AvailableCardToPurchase!]!
  getAvailableCardsToPutInDeck(userId: String!): [AvailableCardToPutInDeck!]!
  getFolderById(getFolderByIdInput: GetFolderByIdInput!): Folder!
  getUserByEmail(email: String!): UserDetailInformation
  getUserById(id: String!): UserDetailInformation
  sayHello: String!
  users: [User!]!
}

input SignInInput {
  password: String!
  username: String!
}

type SignInOutput {
  access_token: String!
}

input UpdateFolderInput {
  cardIds: [String!]!
  folderId: String!
  userId: String!
}

type UpdatedFolderOutput {
  cardNotExist: Boolean!
  folderNotFound: Boolean!
  reachedMaxCopiesOfCard: Boolean!
  successful: Boolean!
}

type User {
  password: String!
  username: String!
}

type UserDetailInformation {
  avatarUrl: String!
  coins: Float!
  email: String!
  folders: [Folder!]!
  id: String!
  role: String!
  username: String!
}